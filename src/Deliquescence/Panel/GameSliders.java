/* 
 * Copyright (c) 2014, Deliquescence <Deliquescence1@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * - Neither the name of the copyright holder nor the names of its contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package deliquescence.panel;

import deliquescence.Config;
import deliquescence.Refreshable;

/**
 * This panel is meant to be a subpanel. It contains sliders for choosing numeric settings in a game.
 *
 * @author Josh
 */
public class GameSliders extends javax.swing.JPanel implements Refreshable {

    /**
     * Creates new form GameSlidersPanel
     */
    public GameSliders() {
        initComponents();
        Config.refreshables.add(this);
        refreshConfig();
    }

    @Override
    public void refreshConfig() {
        try {//NPE glitch when editing game setup panel
            RowsSlider.setMaximum(Config.getInt("MAX_ROWS"));
            ColumnsSlider.setMaximum(Config.getInt("MAX_COLUMNS"));
            PlayersSlider.setMaximum(Config.getInt("MAX_PLAYERS"));
        } catch (NullPointerException e) {//Config not loaded
            RowsSlider.setMaximum(15);
            ColumnsSlider.setMaximum(10);
            PlayersSlider.setMaximum(8);
        }
    }

    /**
     * Setting for the number of rows.
     *
     * @return The configured number of rows.
     */
    public int getRows() {
        return RowsSlider.getValue();
    }

    /**
     * Setting for the number of columns.
     *
     * @return The configured number of columns.
     */
    public int getColumns() {
        return ColumnsSlider.getValue();
    }

    /**
     * Setting for the number of players.
     *
     * @return The configured number of players.
     */
    public int getPlayers() {
        return PlayersSlider.getValue();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PlayersLabel = new javax.swing.JLabel();
        PlayersSlider = new javax.swing.JSlider();
        jSeparator1 = new javax.swing.JSeparator();
        RowsLabel = new javax.swing.JLabel();
        RowsSlider = new javax.swing.JSlider();
        jSeparator2 = new javax.swing.JSeparator();
        ColumnsLabel = new javax.swing.JLabel();
        ColumnsSlider = new javax.swing.JSlider();
        jSeparator3 = new javax.swing.JSeparator();

        setPreferredSize(new java.awt.Dimension(400, 400));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        PlayersLabel.setText("Players:");
        add(PlayersLabel);

        PlayersSlider.setMajorTickSpacing(1);
        PlayersSlider.setMaximum(8);
        PlayersSlider.setMinimum(2);
        PlayersSlider.setMinorTickSpacing(1);
        PlayersSlider.setPaintLabels(true);
        PlayersSlider.setPaintTicks(true);
        PlayersSlider.setSnapToTicks(true);
        PlayersSlider.setValue(2);
        add(PlayersSlider);
        add(jSeparator1);

        RowsLabel.setText("Rows:");
        add(RowsLabel);

        RowsSlider.setMajorTickSpacing(1);
        RowsSlider.setMaximum(10);
        RowsSlider.setMinimum(3);
        RowsSlider.setMinorTickSpacing(1);
        RowsSlider.setPaintLabels(true);
        RowsSlider.setPaintTicks(true);
        RowsSlider.setSnapToTicks(true);
        RowsSlider.setValue(9);
        add(RowsSlider);
        add(jSeparator2);

        ColumnsLabel.setText("Columns:");
        add(ColumnsLabel);

        ColumnsSlider.setMajorTickSpacing(1);
        ColumnsSlider.setMaximum(10);
        ColumnsSlider.setMinimum(3);
        ColumnsSlider.setMinorTickSpacing(1);
        ColumnsSlider.setPaintLabels(true);
        ColumnsSlider.setPaintTicks(true);
        ColumnsSlider.setSnapToTicks(true);
        ColumnsSlider.setValue(6);
        add(ColumnsSlider);
        add(jSeparator3);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ColumnsLabel;
    private javax.swing.JSlider ColumnsSlider;
    private javax.swing.JLabel PlayersLabel;
    private javax.swing.JSlider PlayersSlider;
    private javax.swing.JLabel RowsLabel;
    private javax.swing.JSlider RowsSlider;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
