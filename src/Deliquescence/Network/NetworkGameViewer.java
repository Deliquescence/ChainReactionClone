/*
 * Copyright (c) 2014, Deliquescence <Deliquescence1@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * - Neither the name of the copyright holder nor the names of its contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package deliquescence.Network;

import deliquescence.Config;
import deliquescence.Panel.GameManager;
import deliquescence.Panel.GamePanel;
import com.esotericsoftware.minlog.Log;
import java.io.IOException;
import java.net.InetAddress;
import javax.swing.BoxLayout;

/**
 * Displays waiting room panel or game panel
 *
 * @author Josh
 */
public class NetworkGameViewer extends javax.swing.JPanel {

    GameServer server;
    GameClient client;
    GameManager gameList;
    int localPlayers;

    /**
     * Client version
     * Contains waiting room panel, until wait is done and game panel is displayed.
     *
     * @param listPanel Parent game manager of this
     * @param addr The address client will try and connect to after calling tryClientConnect()
     * @param localPlayers number of local players
     *
     * @throws java.io.IOException Client connect errors
     */
    public NetworkGameViewer(GameManager listPanel, InetAddress addr, int localPlayers) throws IOException {
        this.gameList = listPanel;
        this.localPlayers = localPlayers;
        initComponents();
        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

        client = new GameClient();
        Networking.register(client);

        client.start();

        NetworkGameSettings settings = new NetworkGameSettings();
        client.settings = settings;

        client.connect(5000, addr.getHostAddress(), Config.getInt("NETWORK_PORT"));

        WaitingRoomPanel wrp = new WaitingRoomPanel(listPanel, client, localPlayers, this);
        add(wrp);

    }

    /**
     * Server version
     * Contains waiting room panel, until wait is done and game panel is displayed.
     *
     * @param listPanel Parent game manager of this
     * @param settings The initial game settings for the server
     * @param localPlayers number of local players
     *
     * @throws IOException Server bind errors
     */
    public NetworkGameViewer(GameManager listPanel, NetworkGameSettings settings, int localPlayers) throws IOException {
        this.gameList = listPanel;
        this.localPlayers = localPlayers;
        initComponents();
        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

        server = new GameServer();
        Networking.register(server);

        server.start();

        server.setSettings(settings);

        server.bind(Config.getInt("NETWORK_PORT"));

        add(new WaitingRoomPanel(listPanel, server, localPlayers, this));
    }

    public void displayGame(GamePanel p) {
        Log.trace("NGV.displayGame");
        this.removeAll();
        add(p);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
